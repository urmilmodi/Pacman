--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_g2a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1237w[3..0]	: WIRE;
	w_anode1254w[3..0]	: WIRE;
	w_anode1264w[3..0]	: WIRE;
	w_anode1274w[3..0]	: WIRE;
	w_anode1284w[3..0]	: WIRE;
	w_anode1294w[3..0]	: WIRE;
	w_anode1304w[3..0]	: WIRE;
	w_anode1314w[3..0]	: WIRE;
	w_anode1324w[3..0]	: WIRE;
	w_anode1335w[3..0]	: WIRE;
	w_anode1345w[3..0]	: WIRE;
	w_anode1355w[3..0]	: WIRE;
	w_anode1365w[3..0]	: WIRE;
	w_anode1375w[3..0]	: WIRE;
	w_anode1385w[3..0]	: WIRE;
	w_anode1395w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1314w[3..3], w_anode1304w[3..3], w_anode1294w[3..3], w_anode1284w[3..3], w_anode1274w[3..3], w_anode1264w[3..3], w_anode1254w[3..3], w_anode1237w[3..3]);
	eq_wire2w[] = ( w_anode1395w[3..3], w_anode1385w[3..3], w_anode1375w[3..3], w_anode1365w[3..3], w_anode1355w[3..3], w_anode1345w[3..3], w_anode1335w[3..3], w_anode1324w[3..3]);
	w_anode1237w[] = ( (w_anode1237w[2..2] & (! data_wire[2..2])), (w_anode1237w[1..1] & (! data_wire[1..1])), (w_anode1237w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1254w[] = ( (w_anode1254w[2..2] & (! data_wire[2..2])), (w_anode1254w[1..1] & (! data_wire[1..1])), (w_anode1254w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1264w[] = ( (w_anode1264w[2..2] & (! data_wire[2..2])), (w_anode1264w[1..1] & data_wire[1..1]), (w_anode1264w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1274w[] = ( (w_anode1274w[2..2] & (! data_wire[2..2])), (w_anode1274w[1..1] & data_wire[1..1]), (w_anode1274w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1284w[] = ( (w_anode1284w[2..2] & data_wire[2..2]), (w_anode1284w[1..1] & (! data_wire[1..1])), (w_anode1284w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1294w[] = ( (w_anode1294w[2..2] & data_wire[2..2]), (w_anode1294w[1..1] & (! data_wire[1..1])), (w_anode1294w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1304w[] = ( (w_anode1304w[2..2] & data_wire[2..2]), (w_anode1304w[1..1] & data_wire[1..1]), (w_anode1304w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1314w[] = ( (w_anode1314w[2..2] & data_wire[2..2]), (w_anode1314w[1..1] & data_wire[1..1]), (w_anode1314w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1324w[] = ( (w_anode1324w[2..2] & (! data_wire[2..2])), (w_anode1324w[1..1] & (! data_wire[1..1])), (w_anode1324w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1335w[] = ( (w_anode1335w[2..2] & (! data_wire[2..2])), (w_anode1335w[1..1] & (! data_wire[1..1])), (w_anode1335w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1345w[] = ( (w_anode1345w[2..2] & (! data_wire[2..2])), (w_anode1345w[1..1] & data_wire[1..1]), (w_anode1345w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1355w[] = ( (w_anode1355w[2..2] & (! data_wire[2..2])), (w_anode1355w[1..1] & data_wire[1..1]), (w_anode1355w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1365w[] = ( (w_anode1365w[2..2] & data_wire[2..2]), (w_anode1365w[1..1] & (! data_wire[1..1])), (w_anode1365w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1375w[] = ( (w_anode1375w[2..2] & data_wire[2..2]), (w_anode1375w[1..1] & (! data_wire[1..1])), (w_anode1375w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1385w[] = ( (w_anode1385w[2..2] & data_wire[2..2]), (w_anode1385w[1..1] & data_wire[1..1]), (w_anode1385w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1395w[] = ( (w_anode1395w[2..2] & data_wire[2..2]), (w_anode1395w[1..1] & data_wire[1..1]), (w_anode1395w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
