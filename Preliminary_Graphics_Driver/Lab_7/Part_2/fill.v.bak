// Part 2 skeleton

module fill
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
		KEY,							// On Board Keys
		SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	input	[3:0]	KEY;	
	input [9:0] SW;				
	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[7:0]	VGA_R;   				//	VGA Red[7:0] Changed from 10 to 8-bit DAC
	output	[7:0]	VGA_G;	 				//	VGA Green[7:0]
	output	[7:0]	VGA_B;   				//	VGA Blue[7:0]
	
	wire resetn;
	assign resetn = KEY[0];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	wire black;
	wire plot;

	x = 8'd58;
	y = 8'd9;
	colour = 3'd7;

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
	//FSM f1(.data(SW[9:0]), .wireEn(~SW[1]), .go(~KEY[3]), .clk(CLOCK_50), .resetn(KEY[0]), .black_in(black), .plot(plot), .clr(colour), .x(x), .y(y));
	//assign black = ~KEY[2];
	//assign wireEn = plot;
	
endmodule

module FSM (data, wireEn, go, clk, resetn, black_in, plot, clr, x, y);
	input [9:0] data;
	input wireEn;
	input go;
	input clk;
	input resetn;
	input black_in;

	output reg plot;
	output reg [2:0] clr;
	output reg [7:0] x;
	output reg [6:0] y;

	reg [7:0] x_in;
	reg [6:0] y_in;
	reg [3:0] count;

	reg [5:0] current_state;
	reg [5:0] next_state;
	reg ld_x, ld_y, ld_c, black, startCount;

	localparam  S_LOAD_COLOURX        = 5'd0,
                S_LOAD_COLOURX_WAIT   = 5'd1,
                S_LOAD_Y              = 5'd2,
                S_LOAD_Y_WAIT         = 5'd3,
                S_PLOT                = 5'd4,
                S_PLOT_WAIT           = 5'd5,
                S_BLACK               = 5'd6,
                S_BLACK_WAIT          = 5'd7;
    
    // Next state logic aka our state table
    always @(*)
    begin: state_table 
            case (current_state)
                S_LOAD_COLOURX: next_state = go ? S_LOAD_COLOURX_WAIT : S_LOAD_COLOURX; // Loop in current state until value is input
                S_LOAD_COLOURX_WAIT: next_state = go ? S_LOAD_COLOURX_WAIT : S_LOAD_Y; // Loop in current state until go signal goes low
                S_LOAD_Y: next_state = go ? S_LOAD_Y_WAIT : S_LOAD_Y; // Loop in current state until value is input
                S_LOAD_Y_WAIT: next_state = go ? S_LOAD_Y_WAIT : S_PLOT_WAIT; // Loop in current state until go signal goes low
                S_PLOT: next_state = go ? S_LOAD_COLOURX : S_PLOT;
				S_PLOT_WAIT: next_state = go ? S_PLOT : S_PLOT_WAIT;
				S_BLACK: next_state = S_BLACK_WAIT;
				S_BLACK_WAIT: next_state = go ? S_BLACK_WAIT : S_LOAD_COLOURX;
            default: next_state = S_LOAD_COLOURX;
        endcase
    end // state_table

	// Output logic aka all of our datapath control signals
    always @(*)
    begin: enable_signals
        // By default make all our signals 0 to avoid latches.
        // This is a different style from using a default statement.
        // It makes the code easier to read.  If you add other out
        // signals be sure to assign a default value for them here.
        ld_c = 1'b0;
        ld_x = 1'b0;
        ld_y = 1'b0;
        plot = 1'b0;
		black = 1'b0;
		startCount = 1'b0;

        case (current_state)
            S_LOAD_COLOURX: begin
                ld_c = 1'b1;
				ld_x = 1'b1;
                end
            S_LOAD_Y: begin
                ld_y = 1'b1;
                end
            S_PLOT: begin
                plot = 1'b1;
                end
            S_BLACK: begin
                black = 1'b1;
                end
			S_BLACK_WAIT: begin
				plot = 1'b1;
				startCount = 1'b1;
			end
        // default:    // don't need default since we already made sure all of our outputs were assigned a value at the start of the always block
        endcase
    end // enable_signals
   
    // current_state registers
    always@(posedge clk)
    begin: state_FFs
        if(!resetn)
            current_state <= S_LOAD_COLOURX;
		else if (black_in)
			current_state <= S_BLACK;
        else
            current_state <= next_state;
    end // state_FFS


	// Registers a, b, c, x with respective input logic
    always@(posedge clk) begin
        if(!resetn | black) begin
            clr <= 3'b0; 
            x_in <= 8'b0; 
            y_in <= 7'b0; 
        end
        else begin
            if(ld_c)
                clr <= data[9:7];
            if(ld_x)
                x_in <= {1'b0, data[6:0]};
            if(ld_y)
                y_in <= data[6:0];

			if (startCount) begin

				count <= 4'b0;
				if (y_in > 8'd120 & x_in < 8'd160) begin
					x_in <= x_in + 8'd1;
					y_in <= 8'd0;
				end

				if ( y < 8'd120)
					y_in <= y_in + 8'd1;
			end
			if (!startCount)
				count <= count + 1'b1;
        end
    end
 
    // The ALU 
    always @(*)
    begin : ALU
        x = x_in + count[1:0];
		y = y_in + count[3:2];
    end
endmodule